Private class __Persister__
extends SysDataEntityPersister
{
    // Data source ID macros
    #define.SecurityUserRole_ID(1)
    #define.SecurityRole_ID(2)
    
    // Data source buffers
    SecurityUserRole m_SecurityUserRole;
    SecurityRole m_SecurityRole;
    
    protected void mapEntityToDataSources(DataEntityRuntimeContext _entityCtx)
    {
        this.validateFieldFailed = false;
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('SecurityUserRole'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('SecurityRole'));
        this.mapEntityToDataSourcesExtensions(_entityCtx);
        if(this.validateFieldFailed)
        {
            throw Exception::ViewDataSourceValidation;
        }
    }
    private boolean isAnyFieldSet_DS2(SecurityRole _securityRole, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_securityRole.isFieldSet(fieldnum(SecurityRole,AotName)))
        {
            return true;
        }
        if(_securityRole.isFieldSet(fieldnum(SecurityRole,Name)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _securityRole) ? true : false;
        return rtrn;
    }
    private void foreignKeyPropagation_DS1(DataEntityRuntimeContext _entityCtx, SecurityUserRole _securityUserRole)
    {
        SecurityRole securityRole_ = _entityCtx.getRuntimeContextByName('SecurityRole').getBuffer();
        // do not set foreign key values if they are same to make sure validation is not fired unless value changed
        if(_securityUserRole.SecurityRole != securityRole_.RecId)
        {
            _securityUserRole.SecurityRole = securityRole_.RecId;
        }
        
        // foreign key value validation
        boolean validationFailed = false;
        DataEntityDatabaseOperation dataSourceDBOperation = _entityCtx.getRuntimeContextByName('SecurityUserRole').getDatabaseOperation();
        SystemSecurityUserRoleAssociationEntity dataEntityRecord = _entityCtx.getEntityRecord();
        
        if(!dataEntityRecord.skipDataSourceValidateField(fieldnum(SystemSecurityUserRoleAssociationEntity, SecurityRole)))
        {
            if(!this.validateDataSourceFieldInCompanyContext(_entityCtx.getRuntimeContextByName('SecurityUserRole'), _entityCtx.getRuntimeContextByName('SecurityRole'), dataSourceDBOperation, 'SecurityUserRole.SecurityRole', _securityUserRole, fieldnum(SecurityUserRole, SecurityRole), false/*disallowEditOnCreate*/, true/*disallowEdit*/, false/*callValidateField*/, 1))
            {
                validationFailed = true;
            }
        }
        
        if(validationFailed)
        {
            throw Exception::ViewDataSourceValidation;
        }
    }
    protected boolean saveDataSources(DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = true;
        DataEntityDataSourceRuntimeContext _dataSourceCtx = null;
        // save data sources in topological order.
        {
            // save/update data sources referenced by [SecurityUserRole].
            {
                // handle datasources which are part of extensions and need to be saved before [SecurityRole]
                if(!this.preSaveDataSource(_entityCtx, 'SecurityRole'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('SecurityRole');
                // propagates foreign key values from referenced data sources which are part of extensions.
                this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                if(this.isAnyFieldSet_DS2(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                {
                    // invoke conflict detection for read-only data source.
                    SecurityRole resolvedRecord = this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
                    if(!resolvedRecord)
                    {
                        SecurityRole securityRole_ = _dataSourceCtx.getBuffer();
                        if((securityRole_.AotName))
                        {
                            container dataSourceKeys = ["AotName"];
                            container resolvedRecordValues = [resolvedRecord.AotName];
                            container dataSourceConflictingValues = [securityRole_.AotName];
                            str errorMessage = "";
                            for(int i = 1; i <= conLen(dataSourceKeys); i++)
                            {
                                if(conPeek(dataSourceConflictingValues, i))
                                {
                                    errorMessage += strfmt("'%1': %2, ", conPeek(dataSourceKeys, i), conPeek(resolvedRecordValues, i));
                                }
                            }
                            errorMessage = strDel(errorMessage, strLen(errorMessage) - 1, 2);
                            checkFailed(strfmt("@ApplicationPlatform:DataEntityReadonlyDataSourceNotFoundWithKey", _dataSourceCtx.name(), errorMessage));
                            throw Exception::ViewDataSourceValidation;
                        }
                    }
                    // marks the read-only data source as 'saved' and skips actual insert/update operation.
                    _dataSourceCtx.setDataSaved(true);
                }
                // in case of update marks the read-only data source as 'saved' and skips actual insert/update operation.
                else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                {
                    _dataSourceCtx.setDataSaved(true);
                }
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // inserts/updates data source [SecurityRole].
                if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
                {
                    // returns from here if an inner joined data source fails to be saved.
                    return false;
                }
                this.postSaveDataSource();
            }
            // handle datasources which are part of extensions and need to be saved before [SecurityUserRole]
            if(!this.preSaveDataSource(_entityCtx, 'SecurityUserRole'))
            {
                return false;
            }
            _dataSourceCtx = _entityCtx.getRuntimeContextByName('SecurityUserRole');
            // propagates foreign key values from referenced data sources which are part of extensions.
            this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
            // propagates foreign key values from referenced data sources.
            this.foreignKeyPropagation_DS1(_entityCtx, _dataSourceCtx.getBuffer());
            // inserts/updates data source [SecurityUserRole].
            if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
            {
                // returns from here if the root data source fails to be saved.
                return false;
            }
            this.postSaveDataSource();
        }
        // handle datasources which are part of extensions and need to be saved in last 
        this.preSaveDataSource(_entityCtx, '');
        return rtrn;
    }
    protected boolean deleteDataSources(DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = true;
        DataEntityDataSourceRuntimeContext _dataSourceCtx = null;
        // delete data sources in reverse topological order.
        {
            // handle datasources which are part of extensions and need to be saved before [SecurityUserRole]
            if(!this.preSaveDataSource(_entityCtx, 'SecurityUserRole'))
            {
                return false;
            }
            _dataSourceCtx = _entityCtx.getRuntimeContextByName('SecurityUserRole');
            // deletes data source [SecurityUserRole].
            if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
            {
                // returns from here if the root data source fails to be saved.
                return false;
            }
            this.postSaveDataSource();
            // deletes data sources referenced by [SecurityUserRole].
            {
                // handle datasources which are part of extensions and need to be saved before [SecurityRole]
                if(!this.preSaveDataSource(_entityCtx, 'SecurityRole'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('SecurityRole');
                // skips delete operation against read-only data source.
                // marks the read-only data source as 'saved' and skips actual delete operation.
                _dataSourceCtx.setDataSaved(true);
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // deletes data source [SecurityRole].
                if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
                {
                    // returns from here if an inner joined data source fails to be saved.
                    return false;
                }
                this.postSaveDataSource();
            }
        }
        // handle datasources which are part of extensions and need to be saved in last 
        this.preSaveDataSource(_entityCtx, '');
        return rtrn;
    }
    private void mapToDataSource_DS1(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, SecurityUserRole _securityUserRole, SystemSecurityUserRoleAssociationEntity _systemSecurityUserRoleAssociationEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _systemSecurityUserRoleAssociationEntity, fieldnum(SystemSecurityUserRoleAssociationEntity, AssignmentMode), _securityUserRole, fieldnum(SecurityUserRole, AssignmentMode), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _systemSecurityUserRoleAssociationEntity, fieldnum(SystemSecurityUserRoleAssociationEntity, AssignmentStatus), _securityUserRole, fieldnum(SecurityUserRole, AssignmentStatus), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _systemSecurityUserRoleAssociationEntity, fieldnum(SystemSecurityUserRoleAssociationEntity, SecurityRole), _securityUserRole, fieldnum(SecurityUserRole, SecurityRole), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _systemSecurityUserRoleAssociationEntity, fieldnum(SystemSecurityUserRoleAssociationEntity, UserId), _securityUserRole, fieldnum(SecurityUserRole, User), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _securityUserRole, _systemSecurityUserRoleAssociationEntity);
        _securityUserRole.trackFieldExternallySet(false);
    }
    private void mapToDataSource_DS2(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, SecurityRole _securityRole, SystemSecurityUserRoleAssociationEntity _systemSecurityUserRoleAssociationEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _systemSecurityUserRoleAssociationEntity, fieldnum(SystemSecurityUserRoleAssociationEntity, SecurityRoleIdentifier), _securityRole, fieldnum(SecurityRole, AotName), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _systemSecurityUserRoleAssociationEntity, fieldnum(SystemSecurityUserRoleAssociationEntity, SecurityRoleName), _securityRole, fieldnum(SecurityRole, Name), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _securityRole, _systemSecurityUserRoleAssociationEntity);
        _securityRole.trackFieldExternallySet(false);
    }
    protected void doMapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch(_dataSourceCtx.id())
        {
            case #SecurityUserRole_ID:
                this.mapToDataSource_DS1(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #SecurityRole_ID:
                this.mapToDataSource_DS2(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            default :
                this.doMapEntityToDataSourceExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
    }
    private void mapFromDataSource_DS1(DataEntityDataSourceRuntimeContext _dataSourceCtx, SecurityUserRole _securityUserRole, SystemSecurityUserRoleAssociationEntity _systemSecurityUserRoleAssociationEntity)
    {
        this.mapDataSourceFieldToEntityField(_securityUserRole, fieldnum(SecurityUserRole, AssignmentMode), _systemSecurityUserRoleAssociationEntity, fieldnum(SystemSecurityUserRoleAssociationEntity, AssignmentMode), false);
        this.mapDataSourceFieldToEntityField(_securityUserRole, fieldnum(SecurityUserRole, AssignmentStatus), _systemSecurityUserRoleAssociationEntity, fieldnum(SystemSecurityUserRoleAssociationEntity, AssignmentStatus), false);
        this.mapDataSourceFieldToEntityField(_securityUserRole, fieldnum(SecurityUserRole, SecurityRole), _systemSecurityUserRoleAssociationEntity, fieldnum(SystemSecurityUserRoleAssociationEntity, SecurityRole), false);
        this.mapDataSourceFieldToEntityField(_securityUserRole, fieldnum(SecurityUserRole, User), _systemSecurityUserRoleAssociationEntity, fieldnum(SystemSecurityUserRoleAssociationEntity, UserId), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _securityUserRole, _systemSecurityUserRoleAssociationEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _systemSecurityUserRoleAssociationEntity.fromViewDataSource(_dataSourceCtx.id(), _securityUserRole);
    }
    private void mapFromDataSource_DS2(DataEntityDataSourceRuntimeContext _dataSourceCtx, SecurityRole _securityRole, SystemSecurityUserRoleAssociationEntity _systemSecurityUserRoleAssociationEntity)
    {
        this.mapDataSourceFieldToEntityField(_securityRole, fieldnum(SecurityRole, AotName), _systemSecurityUserRoleAssociationEntity, fieldnum(SystemSecurityUserRoleAssociationEntity, SecurityRoleIdentifier), false);
        this.mapDataSourceFieldToEntityField(_securityRole, fieldnum(SecurityRole, Name), _systemSecurityUserRoleAssociationEntity, fieldnum(SystemSecurityUserRoleAssociationEntity, SecurityRoleName), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _securityRole, _systemSecurityUserRoleAssociationEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _systemSecurityUserRoleAssociationEntity.fromViewDataSource(_dataSourceCtx.id(), _securityRole);
    }
    protected void doMapDataSourceToEntity(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch(_dataSourceCtx.id())
        {
            case #SecurityUserRole_ID:
                this.mapFromDataSource_DS1(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #SecurityRole_ID:
                this.mapFromDataSource_DS2(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            default :
                this.doMapDataSourceToEntityExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
    }
    protected Common doFindDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Common rtrn = null;
        switch(_dataSourceCtx.id())
        {
            case #SecurityUserRole_ID:
                rtrn = this.LookForUniqueKeyMatch_DS1(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #SecurityRole_ID:
                rtrn = this.LookForUniqueKeyMatch_DS2(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            default :
                rtrn = this.doFindDataSourceExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS1(SystemSecurityUserRoleAssociationEntity _systemSecurityUserRoleAssociationEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_systemSecurityUserRoleAssociationEntity.isFieldSet(fieldnum(SystemSecurityUserRoleAssociationEntity, AssignmentMode)))
        {
            return true;
        }
        if(_systemSecurityUserRoleAssociationEntity.isFieldSet(fieldnum(SystemSecurityUserRoleAssociationEntity, AssignmentStatus)))
        {
            return true;
        }
        if(_systemSecurityUserRoleAssociationEntity.isFieldSet(fieldnum(SystemSecurityUserRoleAssociationEntity, SecurityRole)))
        {
            return true;
        }
        if(_systemSecurityUserRoleAssociationEntity.isFieldSet(fieldnum(SystemSecurityUserRoleAssociationEntity, UserId)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceExtensionFieldSet(_systemSecurityUserRoleAssociationEntity, 'SecurityUserRole', disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS2(SystemSecurityUserRoleAssociationEntity _systemSecurityUserRoleAssociationEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_systemSecurityUserRoleAssociationEntity.isFieldSet(fieldnum(SystemSecurityUserRoleAssociationEntity, SecurityRoleIdentifier)))
        {
            return true;
        }
        if(_systemSecurityUserRoleAssociationEntity.isFieldSet(fieldnum(SystemSecurityUserRoleAssociationEntity, SecurityRoleName)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceExtensionFieldSet(_systemSecurityUserRoleAssociationEntity, 'SecurityRole', disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean rtrn = false;
        switch(_dataSourceCtx.id())
        {
            case #SecurityUserRole_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS1(_entityCtx.getEntityRecord());
                break;
            case #SecurityRole_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS2(_entityCtx.getEntityRecord());
                break;
            default :
                rtrn = this.isAnyMappedDataSourceFieldSet_DSExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    private boolean validateDataSource_DS1(DataEntityRuntimeContext _entityCtx, SystemSecurityUserRoleAssociationEntity _systemSecurityUserRoleAssociationEntity, DataEntityDataSourceRuntimeContext _dataSourceCtx, SecurityUserRole _securityUserRole)
    {
        boolean rtrn = true;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _systemSecurityUserRoleAssociationEntity, fieldnum(SystemSecurityUserRoleAssociationEntity, AssignmentMode), 'SystemSecurityUserRoleAssociationEntity.AssignmentMode', _securityUserRole, fieldnum(SecurityUserRole, AssignmentMode), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _systemSecurityUserRoleAssociationEntity, fieldnum(SystemSecurityUserRoleAssociationEntity, AssignmentStatus), 'SystemSecurityUserRoleAssociationEntity.AssignmentStatus', _securityUserRole, fieldnum(SecurityUserRole, AssignmentStatus), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _systemSecurityUserRoleAssociationEntity, fieldnum(SystemSecurityUserRoleAssociationEntity, UserId), 'SystemSecurityUserRoleAssociationEntity.UserId', _securityUserRole, fieldnum(SecurityUserRole, User), false/*disallowEditOnCreate*/, true/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateDataSourceExtensions(_entityCtx, _systemSecurityUserRoleAssociationEntity, _dataSourceCtx, _securityUserRole) ? rtrn : false;
        return rtrn;
    }
    protected boolean validateDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean rtrn = true;
        switch(_dataSourceCtx.id())
        {
            case #SecurityUserRole_ID:
                rtrn = this.validateDataSource_DS1(_entityCtx,_entityCtx.getEntityRecord(),_dataSourceCtx,_dataSourceCtx.getBuffer());
                break;
            default :
                rtrn = this.validateDataSourceExtensions_DSExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    private void mapToMatchingRecord_DS1(DataEntityDataSourceRuntimeContext _dataSourceCtx, SecurityUserRole _securityUserRole, SecurityUserRole _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _securityUserRole, fieldnum(SecurityUserRole, AssignmentMode), _matchingRecord, fieldnum(SecurityUserRole, AssignmentMode), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _securityUserRole, fieldnum(SecurityUserRole, AssignmentStatus), _matchingRecord, fieldnum(SecurityUserRole, AssignmentStatus), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _securityUserRole, fieldnum(SecurityUserRole, SecurityRole), _matchingRecord, fieldnum(SecurityUserRole, SecurityRole), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _securityUserRole, fieldnum(SecurityUserRole, User), _matchingRecord, fieldnum(SecurityUserRole, User), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(SystemSecurityUserRoleAssociationEntity), _securityUserRole, _matchingRecord);
    }
    private void mapToMatchingRecord_DS2(DataEntityDataSourceRuntimeContext _dataSourceCtx, SecurityRole _securityRole, SecurityRole _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _securityRole, fieldnum(SecurityRole, AotName), _matchingRecord, fieldnum(SecurityRole, AotName), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _securityRole, fieldnum(SecurityRole, Name), _matchingRecord, fieldnum(SecurityRole, Name), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(SystemSecurityUserRoleAssociationEntity), _securityRole, _matchingRecord);
    }
    protected void mapDataSourceToMatchingRecord(DataEntityDataSourceRuntimeContext _dataSourceCtx, Common _matchingRecord)
    {
        switch(_dataSourceCtx.id())
        {
            case #SecurityUserRole_ID:
                this.mapToMatchingRecord_DS1(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #SecurityRole_ID:
                this.mapToMatchingRecord_DS2(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            default :
                this.mapDataSourceToMatchingRecordExtensions(_dataSourceCtx, _matchingRecord);
                break;
        }
    }
    protected void validateConfigurationKeys(DataEntityRuntimeContext _entityCtx)
    {
    }
    protected boolean hasDataSourceRecordChanged(int _dataSourceId, common _originalRecord, common _updatedRecord)
    {
        boolean hasDataSourceRecordChanged_ = true;
        
        // The method is called for OCC validation and only upon data sources that have One-to-Many relationships.
        
        switch (_dataSourceId)
        {
            case #SecurityRole_ID:
                hasDataSourceRecordChanged_ = this.hasDataSourceRecordChanged_DS2(_originalRecord, _updatedRecord);
                break;
        }
        return hasDataSourceRecordChanged_;
    }
    protected void initializeDataSources(DataEntityRuntimeContext _entityCtx)
    {
        this.initializeDataSource(_entityCtx, 'SecurityUserRole', m_SecurityUserRole, this.getDataSourceId('SecurityUserRole'), this.getDataSourceRuntimeId('SecurityUserRole'), false/* optional */, false/* readonly */, false/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'SecurityRole', m_SecurityRole, this.getDataSourceId('SecurityRole'), this.getDataSourceRuntimeId('SecurityRole'), false/* optional */, true/* readonly */, true/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSourcesExtensions(_entityCtx);
    }
    private boolean hasDataSourceRecordChanged_DS2(SecurityRole _originalRecord, SecurityRole _updatedRecord)
    {
        if (_originalRecord.AotName != _updatedRecord.AotName)
        {
            return true;
        }
        if (_originalRecord.Name != _updatedRecord.Name)
        {
            return true;
        }
        return false;
    }
    private SecurityUserRole LookForUniqueKeyMatch_DS1(SystemSecurityUserRoleAssociationEntity _systemSecurityUserRoleAssociationEntity, SecurityUserRole _securityUserRole)
    {
        SecurityUserRole securityUserRole_ = null;
        
        select
            forUpdate
            firstOnly
                securityUserRole_
        where
            securityUserRole_.RecId == _securityUserRole.RecId
        ;
        
        if (securityUserRole_)
        {
            return securityUserRole_;
        }
        
        select
            forUpdate
            firstOnly
                securityUserRole_
        where
            securityUserRole_.User == _securityUserRole.User && securityUserRole_.SecurityRole == _securityUserRole.SecurityRole
        ;
        
        if (securityUserRole_)
        {
            return securityUserRole_;
        }
        
        return securityUserRole_;
    }
    private SecurityRole LookForUniqueKeyMatch_DS2(SystemSecurityUserRoleAssociationEntity _systemSecurityUserRoleAssociationEntity, SecurityRole _securityRole)
    {
        SecurityRole securityRole_ = null;
        
        // Ensuring only fields in the selection list should be accessed for read-only data source.
        securityRole_.checkInvalidFieldAccess(true);
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                AotName, Name, RecId
            from
                securityRole_
        where
            securityRole_.AotName == _securityRole.AotName
        ;
        
        if (securityRole_)
        {
            return securityRole_;
        }
        
        return securityRole_;
    }

}

